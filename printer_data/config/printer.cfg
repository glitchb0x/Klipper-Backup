## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                         	[mcu] section
## Thermistor types                      [extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## PID tune                              [extruder] and [heater_bed] sections
## Fine tune E steps                     [extruder] section

## For wiring directions please see https://docs.vorondesign.com/build/electrical/sw_miniE3_v20_wiring.html

## Webclient config files. Uncomment one depending on UI being used.
[include mainsail.cfg]
#[include fluidd.cfg] 
#[include eddy.cfg]
#[include PIS.cfg]

[printer]
kinematics: corexz
max_velocity: 200
max_accel: 2400
max_z_velocity: 50
max_z_accel: 1000
square_corner_velocity: 4.0

[mcu]
###Change to device found by "ls -l /dev/serial/by-id/" with just one this MCU connected to Pi
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_27005B000A50414733303120-if00

[static_digital_output usb_pullup_enable]
pins: !PC13

#####################################################################
# 	X Stepper Settings
#####################################################################

######
# Motor -XM
# Endstop - X-STOP
###############
[stepper_x]
step_pin: PB13
dir_pin: PB12
enable_pin: !PB14
rotation_distance: 40
full_steps_per_rotation: 200
microsteps: 32
endstop_pin: ^PC0
position_endstop: 220
position_min: -15
position_max: 220
homing_speed: 70
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.5
interpolate: False
stealthchop_threshold: 0

#####################################################################
#   Y Stepper Settings
#####################################################################

######
# Motor -YM
# Endstop - Y-STOP
###############
[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB11
rotation_distance: 40
full_steps_per_rotation: 200
microsteps: 32
## Ucomment one of the following:
## Switch-based endstop for Y
endstop_pin: ^PC1 
## Sensorless endstop for Y
#endstop_pin: tmc2209_stepper_y:virtual_endstop
#homing_retract_dist: 0 # Uncomment this line too
position_endstop: 0
position_min: -15
position_max: 235
homing_speed: 70
homing_positive_dir: false

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.5
interpolate: False
stealthchop_threshold: 0
## Uncomment if using sensorless Y homing.
#driver_SGTHRS: 120 # tune this once it's working.

#####################################################################
# 	Z Stepper Settings
#####################################################################

######
# Motor -ZAM
# Endstop - Z-STOP
###############
[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
rotation_distance: 40
full_steps_per_rotation: 200
microsteps: 32
endstop_pin: probe:z_virtual_endstop
position_max: 255
homing_speed: 40
position_min: -3.0

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.5
interpolate: False
stealthchop_threshold: 0

#####################################################################
#   Extruder Settings
#####################################################################

[extruder]
max_extrude_only_distance: 1000.0
pressure_advance: 0.055
pressure_advance_smooth_time: 0.04
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
gear_ratio: 42:12
rotation_distance: 26.359
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
min_extrude_temp: 170
min_temp: 0
max_temp: 300
#control: pid
#pid_Kp: 23.561
#pid_Ki: 1.208
#pid_Kd: 114.859

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.7
hold_current: 0.3
interpolate: False

#####################################################################
# 	Bed Heater
#####################################################################

######
# BED Connector
###############
[heater_bed]
heater_pin: PC9
##  Validate the following thermistor type to make sure it is correct
##  See https://www.klipper3d.org/Config_Reference.html#common-thermistors for additional options
sensor_type: Generic 3950
sensor_pin: PC4
min_temp: 0
max_temp: 130
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
# 	Fan Control
#####################################################################

######
# Electronics Fan
# FAN1 Connector
###############
[controller_fan my_controller_fan]
pin: PC7 
max_power: 1.00
kick_start_time: 0.200
heater: heater_bed

######
# Hot End Fan
# FAN2 Connector
###############
[heater_fan extruder_fan]
pin: PB15
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

######
# Part Cooling Fan
# FAN0 Connector
###############
[fan]
pin: PC6  # "FAN0"
cycle_time: .08
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
kick_start_time: .25


#####################################################################
# 	Probe
#####################################################################

######
#Z Max Connector on Z(main) Board
#Inductive Probe
###############
#[probe]
##      If your probe is NO instead of NC, add change pin to !z:P1.24
#pin: ^PC2
#x_offset: 0
#y_offset: 25
#z_offset: 0
#samples: 3
#samples_result: median
#sample_retract_dist: 3
#samples_tolerance: 0.006
#samples_tolerance_retries: 3
#####################################################################
#   EDDY
#####################################################################
# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044340310A95F1C-if00 # This is the serial address of your eddy probe. This can be found by using the terminal of your klipper instance (typically through SSH) and using the command ```ls /dev/serial/by-id``` 
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu # Sets the type of sensor for Klipper to read
sensor_mcu: eddy # Sets the MCU of the eddy probe tempereature sensor
min_temp: 10 # Sets the minimum tempereature for eddys tempereature sensor to operate
max_temp: 100 # Sets the maximum tempereature for eddys tempereature sensor to operate

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 2.0
#i2c_address:
i2c_mcu: eddy  # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the MCU you have used.
i2c_bus: i2c0f # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the I2C bus you have used.
# Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
# For a standard Voron stealthburner X carriage mount there should be no need to change the defaults below.
x_offset: -32
y_offset: -25

# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2

[bed_mesh]
horizontal_move_z: 2
speed: 200
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
mesh_min: 10, 10  # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
mesh_max: 188, 195 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
probe_count: 9, 9
algorithm: bicubic
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[safe_z_home]
home_xy_position: 110, 110 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
z_hop: 15
z_hop_speed: 25
speed: 200

###############################
#          Input Shaper
###############################
[input_shaper]
shaper_freq_x: 59.2
shaper_type_x: mzv
shaper_freq_y: 32.6
shaper_type_y: mzv



###############################Macros and related################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[save_variables]
#filename: ~/printer_data/config/variables.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.



# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[delayed_gcode RESTORE_PROBE_OFFSET]
#initial_duration: 1.
#gcode:
#  {% set svv = printer.save_variables.variables %}
#  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
#  {% endif %}



# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[gcode_macro Z_OFFSET_APPLY_PROBE]
#rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
#gcode:
#  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
#  {% if params.Z_ADJUST %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
#  {% endif %}
#  {% if params.Z %}
#    {% set paramList = rawparams.split() %}
#    {% for i in range(paramList|length) %}
#      {% if paramList[i]=="Z=0" %}
#        {% set temp=paramList.pop(i) %}
#        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
#        {% if paramList.append(temp) %}{% endif %}
#      {% endif %}
#    {% endfor %}
#    {% set rawparams=paramList|join(' ') %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
#  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}



#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
 # SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
 # SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg

#####################################################################
# 	Displays
#####################################################################
## 	For the mini12864 Display, the [display] and [neopixel] must be uncommented
# mini12864 LCD Display
# connected to exp1/2
#[display]
##    mini12864 LCD Display
#lcd_type: uc1701
#cs_pin: PB8
#a0_pin: PB15
#rst_pin: PB9
#encoder_pins: ^PA9,^PA10
#click_pin: ^!PB5
#contrast: 63
#spi_software_sclk_pin: PA5
#spi_software_mosi_pin: PA7
#spi_software_miso_pin: PA6
#menu_reverse_navigation: True

#[neopixel fysetc_mini12864]
##	To control Neopixel RGB in mini12864 display
## Remember with these ones, you'll need to remove the connector header on the LCD for EXT1 + 2
## (it slides off) and reverse it for it to work on your SKR (1.3 and 1.4) board
#pin: PA15
#chain_count: 3
#initial_RED: 1
#initial_GREEN: 1
#initial_BLUE: 1
#color_order: RGB

##	Set RGB values on boot up for each Neopixel. 
##	Index 1 = display, Index 2 and 3 = Knob
#[delayed_gcode setdisplayneopixel]
#initial_duration: 1
#gcode:
#        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0	# Backlit Screen colour
#        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0	# Top left Knob colour
#        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3				# Bottom right knob colour

#####################################################################
#   Case Lights
#####################################################################
[output_pin LIGHTS]
pin: PA8
value: 0
shutdown_value: 0

[gcode_macro lights_on]
gcode:
    SET_PIN PIN=LIGHTS VALUE=1.0

[gcode_macro lights_off]
gcode:
    SET_PIN PIN=LIGHTS VALUE=0.0


#####################################################################
# 	Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    M117 Homing...                 ; display message
    G28 Y0 X0 Z0
    
    ##Purge Line Gcode
    G92 E0;
    G90
    G0 X5 Y5 F6000
    G0 Z0.4
    G91
    G1 X120 E30 F1200;
    G1 Y1
    G1 X-120 E30 F1200;
    G92 E0;
    G90
    
    G1 Z15.0 F600 ;move the platform down 15mm
    G1 X125 Y125 F3000
    G92 E0 ;zero the extruded length again
    G1 F9000
    M117 Printing...


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    M117 Finished!

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe_eddy_current btt_eddy]
#*# reg_drive_current = 17
#*# calibrate =
#*# 	0.050000:3229149.507,0.087500:3228151.792,0.131250:3226754.844,
#*# 	0.168750:3225400.359,0.212500:3223964.674,0.250000:3222804.505,
#*# 	0.287500:3221713.069,0.331250:3220399.008,0.368750:3219193.397,
#*# 	0.412500:3217844.085,0.450000:3216755.286,0.487500:3215629.928,
#*# 	0.531250:3214415.505,0.568750:3213167.567,0.612500:3211852.959,
#*# 	0.650000:3210798.564,0.687500:3209786.771,0.731250:3208671.514,
#*# 	0.768750:3207624.768,0.812500:3206498.377,0.850000:3205556.059,
#*# 	0.887500:3204684.799,0.931250:3203704.303,0.968750:3202740.552,
#*# 	1.012500:3201667.475,1.050000:3200817.822,1.087500:3200015.745,
#*# 	1.131250:3199105.738,1.168750:3198267.247,1.212500:3197348.075,
#*# 	1.250000:3196569.553,1.287500:3195820.153,1.331250:3194993.357,
#*# 	1.368750:3194187.042,1.412500:3193315.003,1.450000:3192614.462,
#*# 	1.487500:3191900.507,1.531250:3191162.708,1.568750:3190475.922,
#*# 	1.612500:3189702.246,1.650000:3189101.506,1.687500:3188501.905,
#*# 	1.731250:3187812.354,1.768750:3187196.139,1.812500:3186476.095,
#*# 	1.850000:3185879.982,1.887500:3185338.831,1.931250:3184732.999,
#*# 	1.968750:3184142.936,2.012500:3183500.439,2.050000:3183009.606,
#*# 	2.087500:3182485.217,2.131250:3181851.515,2.168750:3181306.055,
#*# 	2.212500:3180710.973,2.250000:3180221.649,2.287500:3179758.399,
#*# 	2.331250:3179255.120,2.368750:3178766.836,2.412500:3178251.108,
#*# 	2.450000:3177794.085,2.487500:3177388.098,2.531250:3176928.737,
#*# 	2.568750:3176475.073,2.612500:3176021.487,2.650000:3175619.219,
#*# 	2.687500:3175245.806,2.731250:3174828.134,2.768750:3174471.855,
#*# 	2.812500:3174082.518,2.850000:3173744.604,2.887500:3173384.791,
#*# 	2.931250:3172992.969,2.968750:3172676.394,3.012500:3172249.719,
#*# 	3.050000:3171940.173,3.087500:3171637.301,3.131250:3171290.937,
#*# 	3.168750:3170952.448,3.212500:3170585.422,3.250000:3170269.543,
#*# 	3.287500:3169985.758,3.331250:3169664.422,3.368750:3169349.052,
#*# 	3.412500:3169014.726,3.450000:3168705.506,3.487500:3168460.486,
#*# 	3.531250:3168170.268,3.568750:3167906.344,3.612500:3167604.398,
#*# 	3.650000:3167378.976,3.687500:3167120.872,3.731250:3166856.680,
#*# 	3.768750:3166573.511,3.812500:3166265.531,3.850000:3166039.072,
#*# 	3.887500:3165800.454,3.931250:3165563.403,3.968750:3165375.139,
#*# 	4.012500:3165121.194,4.050000:3164907.626
#*#
#*# [temperature_probe btt_eddy]
#*# calibration_temp = 37.842805
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 74.013
#*# pid_ki = 1.869
#*# pid_kd = 732.724
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.762
#*# pid_ki = 1.319
#*# pid_kd = 89.769
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.238716, 0.182900, 0.132097, 0.151519, 0.167914, 0.172954, 0.217507, 0.225392, 0.292347
#*# 	  0.389541, 0.331467, 0.278048, 0.248835, 0.239174, 0.220778, 0.229391, 0.238833, 0.263691
#*# 	  0.375684, 0.324163, 0.267551, 0.237225, 0.228379, 0.218677, 0.232224, 0.247928, 0.284024
#*# 	  0.397774, 0.342766, 0.279818, 0.247051, 0.240149, 0.226764, 0.227989, 0.235090, 0.259684
#*# 	  0.368368, 0.304055, 0.248221, 0.222414, 0.219639, 0.208458, 0.212893, 0.224779, 0.250443
#*# 	  0.364891, 0.319414, 0.259714, 0.226384, 0.209729, 0.196634, 0.209566, 0.212924, 0.228719
#*# 	  0.344056, 0.279848, 0.230121, 0.200837, 0.181658, 0.178124, 0.180299, 0.195874, 0.237225
#*# 	  0.434510, 0.312650, 0.245062, 0.221274, 0.203971, 0.183775, 0.183502, 0.182747, 0.209946
#*# 	  0.432744, 0.309513, 0.241699, 0.207319, 0.192749, 0.177457, 0.176669, 0.174444, 0.184923
#*# x_count = 9
#*# y_count = 9
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 10.0
#*# max_x = 188.0
#*# min_y = 10.0
#*# max_y = 194.96000000000004
